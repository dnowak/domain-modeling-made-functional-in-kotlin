import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.0'
    id 'org.jetbrains.kotlinx.kover' version '0.4.2'
    id 'application'
}

group = 'me.dnowak'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation "io.arrow-kt:arrow-core:1.0.1"

    implementation 'io.github.microutils:kotlin-logging:2.0.11'

    implementation 'org.apache.commons:commons-lang3:3.12.0'


    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation "io.kotest:kotest-runner-junit5:4.6.3"
    testImplementation group: 'io.kotest.extensions', name: 'kotest-assertions-arrow', version: '1.1.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'io.mockk:mockk:1.12.0'
}

test {
    useJUnit()
}

compileKotlin {
    kotlinOptions.jvmTarget = '11'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '11'
}

application {
    mainClassName = 'MainKt'
}

tasks.test {
    kover {
        enabled = true
        includes = ['io\\.github\\.dnowak\\..*']
    }
}

tasks.koverHtmlReport {
    enabled = true                          // false to disable report generation
}

tasks.koverXmlReport {
    enabled = true                          // false to disable report generation
}

test {
    useJUnitPlatform {
        includeEngines 'kotest', 'junit-jupiter'
    }
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true
    }
}

kover {
    enabled = true                          // false to disable instrumentation of all test tasks in all modules
    coverageEngine.set(kotlinx.kover.api.CoverageEngine.INTELLIJ) // change instrumentation agent and reporter
    generateReportOnCheck.set(true)         // false to do not execute `koverReport` task before `check` task
}

tasks.koverVerify {
    rule {
        name = "Minimal line coverage rate in percents"
        bound {
            minValue = 50
            // valueType is 'COVERED_LINES_PERCENTAGE' by default
        }
    }
}
